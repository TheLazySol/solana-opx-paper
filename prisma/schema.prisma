// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model for tracking unique users (wallet connections)
model UserWallet {
  id        String   @id @default(cuid())
  walletId  String   @unique(map: "unique_wallet_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sessions UserSession[]

  @@map("users")
}

// Model for tracking user sessions
model UserSession {
  id        String   @id @default(cuid())
  userId    String?  // Optional for anonymous sessions (walletId when connected)
  sessionId String   @unique
  userAgent String?
  expiresAt DateTime // Session expiration time
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  actions UserAction[]
  user    UserWallet?      @relation(fields: [userId], references: [walletId], onDelete: Cascade)

  @@index([userId, expiresAt])
  @@map("user_sessions")
}

// Model for tracking frontend actions
model UserAction {
  id          String   @id @default(cuid())
  sessionId   String
  actionType  String   // e.g., "button_click", "form_submit", "page_view"
  actionName  String   // e.g., "trade_button", "connect_wallet"
  pagePath    String?  // Current page path
  metadata    Json?    // Additional data as JSON
  timestamp   DateTime @default(now())
  
  // Relations
  session UserSession @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)

  @@map("user_actions")
}

// Model for tracking errors
model ErrorLog {
  id        String   @id @default(cuid())
  sessionId String?
  errorType String   // e.g., "validation_error", "api_error", "wallet_error"
  message   String
  stack     String?
  metadata  Json?
  timestamp DateTime @default(now())

  @@map("error_logs")
}

// ==========================================
// OMLP (Option Margin Liquidity Pool) Models
// ==========================================

// Model for OMLP Pools configuration and state
model OMLPPool {
  id                            String   @id @default(cuid())
  poolId                        String   @unique // e.g., "SOL_POOL"
  asset                         String   // e.g., "SOL"
  tokenAddress                  String   // Token mint address
  
  // Pool configuration
  baseSupplyApy                 Float
  baseBorrowApy                 Float
  utilizationRateMultiplier     Float
  borrowSpread                  Float
  supplyLimit                   Float
  minUtilizationForDynamicRates Float
  maxUtilizationThreshold       Float
  liquidationThreshold          Float
  liquidationPenalty            Float
  
  // Pool state (latest values - also stored in Redis)
  totalSupply                   Float
  availableSupply               Float
  utilizedSupply                Float
  utilizationRate               Float
  currentSupplyApy              Float
  currentBorrowApy              Float
  
  // Metadata
  isActive                      Boolean  @default(true)
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
  deletedAt                     DateTime? // Soft delete
  
  // Relations
  snapshots                     OMLPPoolSnapshot[]
  transactions                  OMLPTransaction[]
  
  @@index([asset, isActive])
  @@index([createdAt])
  @@map("omlp_pools")
}

// Model for pool state snapshots (time series data)
model OMLPPoolSnapshot {
  id               String   @id @default(cuid())
  poolId           String
  
  // Snapshot data
  totalSupply      Float
  availableSupply  Float
  utilizedSupply   Float
  utilizationRate  Float
  currentSupplyApy Float
  currentBorrowApy Float
  assetPrice       Float
  
  // Timestamp
  timestamp        DateTime @default(now())
  
  // Relations
  pool             OMLPPool @relation(fields: [poolId], references: [poolId], onDelete: Cascade)
  
  @@index([poolId, timestamp])
  @@map("omlp_pool_snapshots")
}

// Model for pool transactions
model OMLPTransaction {
  id          String   @id @default(cuid())
  poolId      String
  walletId    String
  
  // Transaction details
  type        String   // "deposit", "withdraw", "borrow", "repay"
  amount      Float
  assetPrice  Float
  
  // Transaction state
  status      String   @default("pending") // "pending", "completed", "failed"
  txHash      String?  // Solana transaction hash
  
  // Timestamps
  createdAt   DateTime @default(now())
  completedAt DateTime?
  
  // Relations
  pool        OMLPPool @relation(fields: [poolId], references: [poolId], onDelete: Cascade)
  
  @@index([poolId, walletId])
  @@index([createdAt])
  @@map("omlp_transactions")
}
